plugins {
    id 'groovy'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

compileGroovy {
    // Enable parameter names in the compiled bytecode
    groovyOptions.configurationScript = file("${rootProject.projectDir}/config/groovy/compiler-config.groovy")
    groovyOptions.optimizationOptions.put('parameters', true)
}

compileJava {
    // Enable parameter names in the compiled bytecode
    options.compilerArgs << '-parameters'
}

dependencies {
    // Groovy
    implementation 'org.apache.groovy:groovy:4.0.25'

    // Spring Boot starters - no need to specify versions as they're managed by Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Added explicit Spring Security config dependency
    implementation 'org.springframework.security:spring-security-config'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // Swagger / OpenAPI for Spring Boot 3.x - use only one implementation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'

    // Development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Make sure we have the MongoDB driver
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // Testing dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Spock Framework
    testImplementation 'org.spockframework:spock-core:2.4-M4-groovy-4.0'
    testImplementation 'org.spockframework:spock-spring:2.4-M4-groovy-4.0'

    // Test containers for MongoDB testing
    testImplementation 'org.testcontainers:testcontainers:1.19.5'
    testImplementation 'org.testcontainers:mongodb:1.19.5'
    testImplementation 'org.testcontainers:spock:1.19.5'

    // Added explicit JAX-B dependencies for Jakarta EE compatibility
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.2'

    // Added JSON path for testing
    testImplementation 'com.jayway.jsonpath:json-path:2.9.0'

    // Ensure JUnit platform dependencies have consistent versions
    testImplementation(platform('org.junit:junit-bom:5.10.2'))
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Use a more reliable way to start/stop MongoDB for tests
tasks.register('startTestMongoDB', Exec) {
    commandLine 'docker', 'compose', '-f', 'docker/docker-compose-test.yml', 'up', '-d', 'mongodb-test'
    doLast {
        println "Waiting for MongoDB to be ready..."
        sleep(10000) // Give MongoDB time to start up
        println "Test MongoDB is ready!"
    }
}

tasks.register('stopTestMongoDB', Exec) {
    commandLine 'docker', 'compose', '-f', 'docker/docker-compose-test.yml', 'down'
}

test {
    dependsOn startTestMongoDB
    finalizedBy stopTestMongoDB

    // Enable test logging
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }

    // Skip failing tests for now
    // ignoreFailures = true
}
