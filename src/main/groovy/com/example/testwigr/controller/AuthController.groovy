package com.example.testwigr.controller

import com.example.testwigr.model.User
import com.example.testwigr.service.UserService
import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.tags.Tag
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.NotBlank
import org.springframework.http.ResponseEntity
import org.springframework.security.authentication.AuthenticationManager
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
import org.springframework.security.core.Authentication
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.web.bind.annotation.*

import jakarta.validation.Valid

@RestController
@RequestMapping('/api/auth')
@Tag(name = 'Authentication', description = 'Authentication API')
class AuthController {

    private final UserService userService
    private final AuthenticationManager authenticationManager

    AuthController(UserService userService, AuthenticationManager authenticationManager) {
        this.userService = userService
        this.authenticationManager = authenticationManager
    }

    @PostMapping('/register')
    @Operation(summary = 'Register a new user')
    ResponseEntity<Map<String, Object>> registerUser(@Valid @RequestBody RegisterRequest registerRequest) {
        User user = new User(
            username: registerRequest.username,
            email: registerRequest.email,
            password: registerRequest.password,
            displayName: registerRequest.displayName ?: registerRequest.username
        )

        User createdUser = userService.createUser(user)

        return ResponseEntity.ok([
            success: true,
            userId: createdUser.id,
            username: createdUser.username
        ] as Map<String, Object>)
    }

    @PostMapping('/login')
    @Operation(summary = 'Log in a user')
    ResponseEntity<Map<String, Object>> login(@Valid @RequestBody LoginRequest loginRequest) {
        Authentication authentication = authenticationManager.authenticate(
            new UsernamePasswordAuthenticationToken(
                loginRequest.username,
                loginRequest.password
            )
        )

        SecurityContextHolder.getContext().setAuthentication(authentication)

        // The JWT is generated by JwtAuthenticationFilter

        return ResponseEntity.ok([
            success: true,
            message: 'User logged in successfully'
        ] as Map<String, Object>)
    }

    @PostMapping('/logout')
    @Operation(summary = 'Log out the current user')
    ResponseEntity<Map<String, Object>> logout() {
        SecurityContextHolder.clearContext()

        return ResponseEntity.ok([
            success: true,
            message: 'User logged out successfully'
        ] as Map<String, Object>)
    }

    static class RegisterRequest {

        @NotBlank(message = 'Username cannot be empty')
        String username

        @NotBlank(message = 'Email cannot be empty')
        @Email(message = 'Email must be valid')
        String email

        @NotBlank(message = 'Password cannot be empty')
        String password

        String displayName

    }

    static class LoginRequest {

        String username
        String password

    }

}
