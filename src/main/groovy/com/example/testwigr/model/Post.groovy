package com.example.testwigr.model

import com.fasterxml.jackson.annotation.JsonIgnore
import io.swagger.v3.oas.annotations.media.ArraySchema
import io.swagger.v3.oas.annotations.media.Schema
import org.springframework.data.annotation.Id
import org.springframework.data.mongodb.core.mapping.Document
import java.time.LocalDateTime

/**
 * Post model representing content created by users on the Testwigr platform.
 * 
 * This model stores the post content along with metadata and social interactions
 * like likes and comments. Posts are the primary content type in the platform,
 * equivalent to tweets in Twitter.
 * 
 * Each post:
 * - Contains text content (max 280 characters)
 * - Is associated with a specific user as the author
 * - Can receive likes from users
 * - Can receive comments from users
 * - Has timestamps for creation and updates
 * 
 * Posts are stored in MongoDB in the "posts" collection.
 */
@Document(collection = "posts")
@Schema(description = "Represents a user post with content, likes, and comments")
class Post {
    /**
     * Unique identifier for the post, automatically generated by MongoDB.
     */
    @Id
    @Schema(description = "Unique identifier for the post", example = "60d21b4667d1d12d98a8e543")
    String id

    /**
     * Text content of the post, limited to 280 characters.
     * This is the main content created by the user.
     */
    @Schema(description = "Text content of the post", example = "This is my first post on Testwigr!", required = true)
    String content

    /**
     * ID of the user who created the post.
     * This is a reference to the User document's ID.
     */
    @Schema(description = "ID of the user who created the post", example = "60d21b4667d1d12d98a8e123", required = true)
    String userId

    /**
     * Username of the user who created the post.
     * Stored directly for denormalization to avoid joins.
     */
    @Schema(description = "Username of the user who created the post", example = "johndoe", required = true)
    String username

    /**
     * Set of user IDs who liked this post.
     * This is a denormalized collection of references to User document IDs.
     */
    @ArraySchema(schema = @Schema(description = "ID of a user who liked the post", example = "60d21b4667d1d12d98a8e456"))
    @Schema(description = "Set of user IDs who liked the post")
    Set<String> likes = []

    /**
     * List of comments on this post.
     * Comments are embedded documents rather than separate collections.
     */
    @ArraySchema(schema = @Schema(implementation = Comment))
    @Schema(description = "List of comments on the post")
    List<Comment> comments = []

    /**
     * The timestamp when the post was created.
     */
    @Schema(description = "Date and time when the post was created", example = "2023-01-15T14:30:15.123")
    LocalDateTime createdAt

    /**
     * The timestamp when the post was last updated.
     */
    @Schema(description = "Date and time when the post was last updated", example = "2023-01-15T15:45:22.456")
    LocalDateTime updatedAt

    /**
     * Default constructor required by MongoDB for object mapping.
     */
    Post() {}

    /**
     * Creates a new post with the specified content, user ID, and username.
     *
     * @param content The text content of the post
     * @param userId The ID of the user creating the post
     * @param username The username of the user creating the post
     */
    Post(String content, String userId, String username) {
        this.content = content
        this.userId = userId
        this.username = username
        this.createdAt = LocalDateTime.now()
        this.updatedAt = LocalDateTime.now()
    }

    /**
     * Checks if a specific user has liked this post.
     * Used to determine if the like button should be highlighted in the UI.
     *
     * @param userId The ID of the user to check
     * @return true if the user has liked the post, false otherwise
     */
    @JsonIgnore
    @Schema(hidden = true)
    boolean isLikedBy(String userId) {
        return likes.contains(userId)
    }

    /**
     * Gets the total number of likes on this post.
     * This is a convenience method to get the size of the likes set.
     *
     * @return The number of likes
     */
    @Schema(description = "Total number of likes on the post", example = "42")
    int getLikeCount() {
        return likes.size()
    }

    /**
     * Gets the total number of comments on this post.
     * This is a convenience method to get the size of the comments list.
     *
     * @return The number of comments
     */
    @Schema(description = "Total number of comments on the post", example = "7")
    int getCommentCount() {
        return comments.size()
    }
    
    /**
     * Returns a string representation of the Post object.
     * Useful for debugging and logging.
     * 
     * @return A string representation of the Post
     */
    @Override
    String toString() {
        return "Post{" +
                "id='" + id + '\'' +
                ", content='" + (content?.length() > 20 ? content.substring(0, 20) + "..." : content) + '\'' +
                ", userId='" + userId + '\'' +
                ", username='" + username + '\'' +
                ", likeCount=" + getLikeCount() +
                ", commentCount=" + getCommentCount() +
                ", createdAt=" + createdAt +
                '}'
    }
}
